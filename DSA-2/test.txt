DSA 2
___________________________________

Bubble Sort
____________

function BubbleSort(arr){
    let swapped
    do{
        swapped=false
        for(let i=0;i<arr.length-1;i++){
            if(arr[i]>arr[i+1]){
                let temp=arr[i]
                arr[i]=arr[i+1]
                arr[i+1]=temp
                swapped=true
            }
        }
    }while(swapped)
    return arr
}
console.log(BubbleSort([-6,7,2,4,-3,5,9]))

InsertionSort
______________
function insertion(arr){
    for(let i=1;i<arr.length;i++){
        let numberOfInsert=arr[i]
        let j=i-1
        while(j>=0&&arr[j]>numberOfInsert){
            arr[j+1]=arr[j]
            j=j-1
        }
        arr[j+1]=numberOfInsert
    }return arr
}



let arr=[8,20,-2,4]
insertion(arr)
console.log(arr)


Quick sort
______________
function quickSort(arr){
    if(arr.length<2){
        return arr
    }
    let pivot=arr[arr.length-1]
    let left=[]
    let right=[]
    for(let i=0;i<arr.length-1;i++){
        if(arr[i]<pivot){
            left.push(arr[i])
        }else{
            right.push(arr[i])
        }
    }
    return [...quickSort(left),pivot,...quickSort(right)]
}

console.log(quickSort([8,20,-2,4,-6]))
{The base case <2 means if it empty or one element only it is sorted that's why we added a base case less than 2}


Quick sort in middile
_____________________
function QuickSort(arr){
    if(arr.length<2){
        return arr
    }
    let leftindex=0
    let rightindex=arr.length-1
    let pivotindex=Math.floor((leftindex+rightindex)/2)
    let pivot=arr[pivotindex]
    let left=[]
    let right=[]
    for(let i=0;i<arr.length;i++){
        if(i===pivotindex)continue
        if(arr[i]<pivot){
            left.push(arr[i])
        }else{
            right.push(arr[i])
        }
    }
    return [...QuickSort(left),pivot,...QuickSort(right)]
}



console.log(QuickSort([-6,2,4,-9,8,10,6]))


MergeSort
___________
function mergeSort(arr){
    if(arr.length<2){
        return arr
    }
    let mid=Math.floor(arr.length/2)
    let leftArray=arr.slice(0,mid)
    let rightArray=arr.slice(mid)
    return merge(mergeSort(leftArray),mergeSort(rightArray))
}
function merge(leftArray,rightArray){
    let sortedArray=[]
    while(leftArray.length&&rightArray.length){
        if(leftArray[0]<=rightArray[0]){
          sortedArray.push(leftArray.shift())  
        }else{
          sortedArray.push(rightArray.shift())
        }
    }
    return [...sortedArray,...leftArray,...rightArray]
}

console.log(mergeSort([-6,2,4,-9,8,10,6]))



Queue Implementations in Array 
_________________________
class Queue{
    constructor(){
        this.items=[]
    }
    
    enqueue(element){
        this.items.push(element)
    }
    dequeue(){
        return this.items.shift()
    }
    isEmpty(){
        return this.items.length==0
    }
    peek(){
        if(!this.isEmpty()){
            return this.items[0]
        }
        return null
    }
    size(){
        return this.items.length
    }
    print(){
        console.log(this.items.toString())
    
    
}

const queue=new Queue()
queue.enqueue(10)
queue.enqueue(20)
queue.enqueue(30)
queue.dequeue()
console.log(queue.peek())
queue.print()
console.log(queue.isEmpty())


Queue implementations in object 
______________________________
class Queue{
    constructor(){
        this.items={}
        this.rear=0
        this.front=0
    }
    enqueue(element){
        this.items[this.rear]=element
        this.rear++
    }
    dequeue(){
        const item=this.items[this.front]
        delete this.items[this.front]
        this.front++
        return item
    }
    isEmpty(){
        return this.rear-this.front==0
    }
    peek(){
        return this.items[this.front]
    }
    size(){
        return this.rear-this.front
    }
    print(){
        console.log(this.items)
    }
}

const queue=new Queue()
queue.enqueue(10)
queue.enqueue(90)
queue.enqueue(90)
queue.dequeue()
console.log(queue.peek())
queue.print()

circularQueue
_____________
class CircularQueue {
    constructor(capacity) {
        this.item = new Array(capacity);
        this.capacity = capacity;
        this.currentlength = 0;
        this.rear = -1;
        this.front = 0;
    }

    isFull() {
        return this.currentlength === this.capacity;
    }

    isEmpty() {
        return this.currentlength === 0;
    }

    enqueue(element)
           {
	        if (this.isFull()) {
            console.log("Queue is full");
            return;
        }
        this.rear = (this.rear + 1) % this.capacity;
        this.item[this.rear] = element;
        this.currentlength += 1;
    }

    dequeue() {
        if (this.isEmpty()) {
            return null;
        }
        const items = this.item[this.front];
        this.item[this.front] = undefined;
        this.front = (this.front + 1) % this.capacity;
        this.currentlength -= 1;
        return items;
    }

    peek() {
        if (this.isEmpty()) {
            return null;
        }
        return this.item[this.front];
    }

    print() {
        if (this.isEmpty()) {
            console.log("Queue is Empty");
        } else {
            let str = "";
            let i = this.front;
            let count = 0;
            while (count < this.currentlength) {
                str += this.item[i] + " ";
                i = (i + 1) % this.capacity;
                count++;
            }
            console.log(str.trim());
        }
    }
}

const queue = new CircularQueue(5);
queue.enqueue(10);
queue.enqueue(20);
queue.enqueue(30);
queue.enqueue(40);
queue.print();  // Output: 10 20 30 40




stack Implementation in Array
_____________________
class Stack{
    constructor(){
        this.stack=[]
    }
    push(element){
        return this.stack.push(element)
    }
    pop(){
        if(this.isEmpty()){
            return "Stack is Empty"
        }
        return this.stack.pop()
    }
    isEmpty(){
        return this.size()==0
    }
    peek(){
        if(this.isEmpty()){
            return "Stack is Empty"
        }
        return this.stack[this.size()-1]
    }
    size(){
        return this.stack.length
    }
    printStack(){
        let listValues=""
        if(this.isEmpty()){
            console.log('Stack is empty ')
        }else{
            for(let i=0;i<this.stack.length;i++){
                listValues+=this.stack[i] + " "
            }console.log(listValues)
        }
        
    }
}

const stack=new Stack()
stack.push(10)
stack.push(20)
stack.push(30)
stack.push(40)
stack.pop()
console.log(stack.peek())
stack.printStack()


stack implementation in LinkedList
__________________________________
class Node{
    constructor(value){
       this.value=value
       this.next=null
    }
}

class Stack{
    constructor(){
        this.top=null
        this.length=0
    }
    push(element){
        const node=new Node(element)
        node.next=this.top
        this.top=node
        this.length++
    }
    pop(){
      if(this.isEmpty()){
          return null
      }
      let poppedValue=this.top.value
      this.top=this.top.next
      this.length--
      return poppedValue
    }
    peek(){
        if(this.isEmpty()){
            return null
        }
        return this.top.value
    }
    isEmpty(){
        return this.length===0
    }
    size(){
        return this.length
    }
    print(value){
        if(this.isEmpty()){
            console.log("list is EMPTY")
        }
        let curr=this.top
        let listValues=""
        while(curr){
            listValues+=`${curr.value} `
            curr=curr.next
        }
        console.log(listValues)
    }
}
const stack=new Stack()
stack.push(20)
stack.push(30)
stack.push(40)
stack.push(50)
stack.print()


HashTable Basics
________________
class HashTable{
    constructor(size){
        this.table=new Array(size)
        this.size=size
    }
    hash(key){
       let total=0
       for(let i=0;i<key.length;i++){
           total+=key.charCodeAt(i)
       }
       return total%this.size
       
    }
    set(key,value){
        const index=this.hash(key)
        this.table[index]=value
    }
    get(key){
        const index=this.hash(key)
        return this.table[index]
    }
    remove(key){
        const index=this.hash(key)
        this.table[index]=undefined
    }
    display(){
        for(let i=0;i<this.table.length;i++){
            if(this.table[i]){
                console.log(i,this.table[i])
            }
        }
    }
    
}
const hash=new HashTable(50)
hash.set("name","Rahul")
hash.set("Age","23")
hash.display()

HashTable using collision
_________________________
class HashTable{
    constructor(size){
        this.table=new Array(size)
        this.size=size
    }
    hash(key){
        let total=0
        for(let i=0;i<key.length;i++){
            total+=key.charCodeAt(i)
        }
        return total%this.size
    }
    set(key,value){
        const index=this.hash(key)
        const bucket=this.table[index]
        if(!bucket){
            this.table[index]=[[key,value]]
        }else{
            let samekeyitem=bucket.find(item=>item[0]===key)
            if(samekeyitem){
                samekeyitem[1]=value
            }else{
                bucket.push([key,value])
            }
        }
    }
    get(key){
        const index=this.hash(key)
        const bucket=this.table[index]
        if(bucket){
            const samekeyitem=bucket.find(item=>item[0]===key)
            if(samekeyitem){
                return samekeyitem[1]
            }
        }
        return undefined
    }
    remove(key){
        const index=this.hash(key)
        const bucket=this.table[index]
        if(bucket){
            const samekeyitem=bucket.find(item=>item[0]===key)
            if(samekeyitem){
                bucket.splice(bucket.indexOf(samekeyitem),1)
            }
        }
        
    }
    display(){
        for(let i=0;i<this.table.length;i++){
            if(this.table[i]){
                console.log(i,this.table[i])
            }
        }
    }
    
}

const hash=new HashTable(50)
hash.set("name","Rahul")
hash.set("mane","Arun")
hash.remove("name")
hash.display()


revrese swntence using stack
______________________________
const reverseWords=function(s){
    const split=s.split(" ")
    const stack=[]
    for(let str of split){
        stack.push(str)
    }
    let result=""
    while(stack.length){
        let current=stack.pop()
        if(current){
            result+=" "+current
        }
        
    }
    return result.trim("")
}

console.log(reverseWords("UNSTOPABBLE in the unverse"))


checking Palindrome in stack
_______________________________
const palindrome=(s)=>{
    let stack=[]
    for(str of s){
        stack.push(str)
    }
    let reversed=""
    while(stack.length){
        reversed+=stack.pop()
    }
    return s===reversed
}

console.log(palindrome("MALAYALAM"))


Undo Redo using STACK
________________________
class UndoRedo{
    constructor(){
    this.undoStack=[]
    this.redoStack=[]
    }
    do(action){
        this.undoStack.push(action)
        this.redoStack=[]
    }
    undo(){
        if(this.undoStack.length===0){
            console.log("nothing to undo return ")
            return
        }
        let action =this.undoStack.pop()
        this.redoStack.push(action)
        console.log("undone",action)
    }
    redo(){
        if(this.redoStack.length===0){
            console.log("Nothing to redo")
            return
        }
        let action =this.redoStack.pop()
        this.undoStack.push(action)
        console.log(action)
    }
}

const editor=new UndoRedo()
editor.do("Type A")
editor.do("Type B")

editor.undo()


Double ended
________________
class double{
    constructor(){
        this.stack=[]
    }
    addToFront(element){
        this.stack.unshift(element)
    }
    addToBack(element){
        this.stack.push(element)
    }
    removeFromFirst(){
        this.stack.shift()
    }
    removeFromback(){
        this.stack.pop()
    }
}

const dq = new double()

dq.addToBack(10)      // [10]
dq.addToFront(20)     // [20, 10]
dq.addToBack(30)      // [20, 10, 30]
dq.removeFromFirst()  // [10, 30]
dq.removeFromback()   // [10]

console.log(dq.stack) 



Queue Using Stack
___________________
class QueUsingStack{
    constructor(){
        this.stack1=[]
        this.stack2=[]
    }
    enqueue(element){
        this.stack1.push(element)
    }
    dequeue(){
        if(this.stack1.length===0&&this.stack2.length===0){
            return "queue is empty"
        }
        if(this.stack2.length===0){
            while(this.stack1.length>0){
                this.stack2.push(this.stack1.pop())
            }
        }
        return this.stack2.pop()
    }
    print(){
        
        console.log("queue",[...this.stack2.reverse(),...this.stack1])
    }
}
const queue = new QueUsingStack()

queue.enqueue(10)
queue.enqueue(20)
queue.enqueue(30)
queue.dequeue()
queue.print()


stackWith Queue
________________
class StackwithQueu{
    constructor(){
        this.q1=[]
        this.q2=[]
    }
    push(element){
        this.q2.push(element)
        while(this.q1.length>0){
            this.q2.push(this.q1.shift())
        }
        const temp=this.q1
        this.q1=this.q2
        this.q2=temp
    }
    pop(){
        if(this.q1.length===0){
            console.log("stack is empty")
            return null
        }
        return this.q1.shift()
    }
    display(){
        for(let item of this.q1){
            console.log(item)
        }
    }
}
const stack = new StackwithQueu();
stack.push(10);
stack.push(20);
stack.push(30);
stack.pop();       // removes 30
stack.display();   // prints 20, 10


max priority queue
_____________________
class PriorityQueue {
    constructor() {  
        this.queue = [];
    }

    enqueue(element, priority) {
        const newElement = { element, priority };
        let added = false;

        for (let i = 0; i < this.queue.length; i++) {
            if (newElement.priority > this.queue[i].priority) {
                this.queue.splice(i, 0, newElement);
                added = true;
                break;
            }
        }

        if (!added) {
            this.queue.push(newElement);
        }
    }

    dequeue() {
        if (!this.isEmpty()) {
            return this.queue.shift();
        }
        return null;
    }

    peek() {
        if (this.isEmpty()) {
            return null;
        }
        return this.queue[0];
    }

    isEmpty() {
        return this.queue.length === 0;
    }

    print() {
        console.log(this.queue.map(item => ${item.element} (priority${item.priority})).join(" ,"));
    }
}

const pq = new PriorityQueue();
pq.enqueue("task1", 2);
pq.enqueue("task2", 4);
pq.enqueue("task4", 1);
pq.print();





Reverse a Stack using recursion
______________________________
function RecursiveStack(stack){
    if(stack.length==0){
        return 
    }
    let top=stack.pop()
    RecursiveStack(stack)
    insertAtbottom(stack,top)
} 
function insertAtbottom(stack,element){
    if(stack.length===0){
        stack.push(element)
        return
    }
    let top=stack.pop()
    insertAtbottom(stack,element)
    stack.push(top)
}

let stack=[1,2,3,4,5]
RecursiveStack(stack)
console.log(stack)

reverseStack(stack);

console.log(stack); // ➜ [4, 3, 2, 1]


Normal stack Revrse
______________________
function reverseStack(){
    let tempstack=[]
    while(stack.length>0){
        tempstack.push(stack.pop())
    }
    return tempstack
}
let stack=[3,4,5,6,7,8,9]
console.log(reverseStack(stack))


Rehashing in HashTable
_________________________
class HashTable{
    constructor(size=4){
        this.table=new Array(size)
        this.size=size
        this.count=0
    }
    hash(key){
        let total=0
        for(let i=0;i<key.length;i++){
            total+=key.charCodeAt(i)
        }
        return total%this.size
    }
    set(key,value){
        let index=this.hash(key)
        let bucket=this.table[index]
        if(!bucket){
           this.table[index]=[[key,value]]
           this.count++
        }else{
            let samekeyitem=bucket.find(item=>item[0]===key)
            if(samekeyitem){
                samekeyitem[1]=value
            }else{
                bucket.push([key,value])
                this.count++
            }
        }
        if(this.count/this.size>0.7){
            this.rehash()
        }
    }
    get(key){
        const index=this.hash(key)
        const bucket=this.table[index]
        if(bucket){
            let samekeyitem=bucket.find(item=>item[0]==key)
            if(samekeyitem){
                return samekeyitem[1]
            }
        }
    }
    remove(key){
        const index=this.hash(key)
        const bucket=this.table[index]
        if(bucket){
            let samekeyitem=bucket.find(item=>item[0]==key)
            if(samekeyitem){
               return bucket.splice(bucket.indexOf(samekeyitem),1)
               this.count--
            }
        }
        
    }
    display(){
        for(let i=0;i<this.table.length;i++){
            if(this.table[i]){
                console.log(this.table[i])
            }
        }
    }
    rehash(){
        console.log("Rehashing the table")
        const oldtable=this.table
        this.size=this.size*2
        this.table=new Array(this.size)
        this.count=0
        for(let i=0;i<oldtable.length;i++){
            const bucket=oldtable[i]
            if(bucket){
                for(let j=0;j<bucket.length;j++){
                    const [key,value]=bucket[j]
                    this.set(key,value)
                }
            }
        }
    }
    

}

    const hash = new HashTable(4)

hash.set("name", "rahul")
hash.set("age", "23")
hash.set("gender", "male")
hash.set("single", "yes")
// Here ⚡ Rehashing happens

hash.set("country", "India")
hash.set("America","Going Soon")
hash.display()

Linear Prbing
_________________

class LinearProbing{
    constructor(size){
        this.table=new Array(size)
        this.size=size
    }
    hash(key){
        let total=0
        for(let i=0;i<key.length;i++){
            total+=key.charCodeAt(i)
        }
        return total%this.size
    }
    set(key,value){
        let index=this.hash(key);
        while(this.table[index]!==undefined&&this.table[index][0]!==key){
            index=(index+1)%this.size;
        }
        this.table[index]=[key,value]
    }
    get(key){
        let index=this.hash(key)
        while(this.table[index]!==undefined){
            if(this.table[index][0]==key){
                return this.table[index][1]
            }
            index=(index+1)%this.size
        }
        return undefined
    }
    remove(key){
        let index=this.hash(key)
        while(this.table[index]!==undefined){
            if(this.table[index][0]===key){
                this.table[index]=undefined
                return
            }
            index=(index+1)%this.size
        }
    }
    display(){
        for(let i=0;i<this.table.length;i++){
            if(this.table[i]){
                console.log(this.table[i])
            }
        }
    }
    
}

const ht = new LinearProbing(10);
ht.set("name", "Rahul");
ht.set("mane", "Cristiano"); // collision with 'name' likely
ht.set("age", "25");
ht.display();

console.log("Get age:", ht.get("age"));

ht.remove("age");
console.log("After removing age:");
ht.display();



QuadraticProbing
________________
class QuadraticProbing{
    constructor(size){
        this.table=new Array(size)
        this.size=size
        this.count=0
    }
    hash(key){
        let total=0
        for(let i=0;i<key.length;i++){
            total+=key.charCodeAt(i)
        }
        return total%this.size
    }
    set(key,value){
        let index=this.hash(key)
        let i=1
        while(this.table[index]!==undefined&&this.table[index][0]!==key){
            index=(index+i*i)%this.size
            i++
        }
        this.table[index]=[key,value]
        this.count++
        
        if(this.count/this.size>0.7){
            this.rehash()
        }
    }
    get(key){
        let index=this.hash(key)
        let i=1
        while(this.table[index]!==undefined){
            if(this.table[index][0]==key){
                return this.table[index][1]
            }
            index=(index+i*i)%this.size
            i++
        }
        return undefined
    }
    remove(key){
        let index=this.hash(key)
        let i=1
        while(this.table[index]!==undefined){
            if(this.table[index][0]==key){
               this.table[index]=undefined
               this.count--
               return
            }
            index=(index+i*i)%this.size
            i++
        }
    }
    display(){
        for(let i=0;i<this.table.length;i++){
            if(this.table[i]){
                console.log(this.table[i])
            }
        }
    }
    rehash(){
        let oldtable=this.table
        this.size=this.size*2
        this.table=new Array(this.size)
        this.count=0
        for(let i=0;i<oldtable.length;i++){
            let bucket=oldtable[i]
            if(bucket!==undefined){
                const [key,value]=bucket
                this.set(key,value)
            }
        }
    }
}

const qp = new QuadraticProbing(10);

qp.set("name", "Messi");
qp.set("mane", "Cristiano"); // will collide with "name"
qp.set("club", "Inter Miami");
qp.set("nation", "Argentina");

qp.display();

console.log("Get nation:", qp.get("nation"));
qp.remove("name");
console.log("After removing 'name':");
qp.display();


DoubleHashing
_________________
class DoubleHashing{
    constructor(size){
        this.table=new Array(size)
        this.size=size
        this.count=0
        this.prime=this.getPrimeLessThanSize()
    } 
    hash1(key){
        let total=0
        for(let i=0;i<key.length;i++){
            total+=key.charCodeAt(i)
        }
        return total%this.size
    }
    hash2(key){
        let total=0
        for(let i=0;i<key.length;i++){
            total+=key.charCodeAt(i)
        }
         return this.prime-(total%this.prime)
    }
    getPrimeLessThanSize(){
        for(let i=this.size-1;i>=2;i--){
            if(this.isPrime(i))return i
        }
        return 3
    }
    isPrime(num){
        if(num<2)return false
        for(let i=2;i<=Math.sqrt(num);i++){
            if(num%i==0){
                return false
            }
        }
        return true
        
    }
    set(key,value){
        let index1=this.hash1(key)
        let index2=this.hash2(key)
        let i=0
        let index=(index1+i*index2)%this.size
        while(this.table[index]!==undefined&&this.table[index][0]!==key){
            i++
            index=(index1+i*index2)%this.size
        }
        this.table[index]=[key,value]
        this.count++
        if(this.count/this.size>0.7){
            this.rehash()
        }
        
    }
    get(key){
        let index1=this.hash1(key)
        let index2=this.hash2(key)
        let i=0
        let index=(index1+i*index2)%this.size
        while(this.table[index]!==undefined){
            if(this.table[index][0]==key){
                return this.table[index][1]
            }
            i++
            index=(index1+i*index2)%this.size
        }
        return undefined
    }
    remove(key){
        let i=0
        let index1=this.hash1(key)
        let index2=this.hash2(key)
        let index=(index1+i*index2)%this.size
        while(this.table[index]!==undefined){
            if(this.table[index][0]==key){
                this.table[index]=undefined
                this.count--
                return
            }
            i++
            index=(index1+i*index2)%this.size
        }
    }
    display(){
        for(let i=0;i<this.table.length;i++){
            if(this.table[i]){
                console.log(this.table[i])
            }
        }
    }
    rehash(){
        let oldtable=this.table
        this.count=0
        this.size=this.size*2
        this.prime=this.getPrimeLessThanSize()
        for(let i=0;i<oldtable.length;i++){
            let bucket=oldtable[i]
            if(bucket!==undefined){
                const[key,value]=bucket
                this.set(key,value)
            }
        }
    }
}
